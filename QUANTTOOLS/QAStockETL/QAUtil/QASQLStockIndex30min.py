import cx_Oracle
import pandas as pd
import numpy as np
from QUANTAXIS.QAUtil import QA_util_log_info
from QUANTTOOLS.QAStockETL.QAData.database_settings import (Oracle_Database, Oracle_User, Oracle_Password, Oralce_Server, MongoDB_Server, MongoDB_Database)

ORACLE_PATH2 = '{user}/{password}@{server}:1521/{database}'.format(database = Oracle_Database, password = Oracle_Password, server = Oralce_Server, user = Oracle_User)

sql_text = '''select to_char(ORDER_DATE, 'yyyy-mm-dd') as "date",
CODE AS "code"
,datetime as "datetime",
VR as VR_30M,
VRSI as VRSI_30M,
VRSI_C as VRSI_C_30M,
VSTD as VSTD_30M,
BOLL as BOLL_30M,
UB as UB_30M,
LB as LB_30M,
WIDTH as WIDTH_30M,
WR as WR_30M,
MR as MR_30M,
SR as SR_30M,
WS as WS_30M,
MS as MS_30M,
SS as SS_30M,
MIKE_WRSC as MIKE_WRSC_30M,
MIKE_WRJC as MIKE_WRJC_30M,
MIKE_WSSC as MIKE_WSSC_30M,
MIKE_WSJC as MIKE_WSJC_30M,
MIKE_TR as MIKE_TR_30M,
MIKE_BOLL as MIKE_BOLL_30M,
ASI as ASI_30M,
ASIT as ASIT_30M,
OBV as OBV_30M,
OBV_C as OBV_C_30M,
VPT as VPT_30M,
MAVPT as MAVPT_30M,
VPT_CROSS1 as VPT_CROSS1_30M,
VPT_CROSS2 as VPT_CROSS2_30M,
VPT_CROSS3 as VPT_CROSS3_30M,
VPT_CROSS4 as VPT_CROSS4_30M,
KDJ_K as KDJ_K_30M,
KDJ_D as KDJ_D_30M,
KDJ_J as KDJ_J_30M,
KDJ_CROSS1 as KDJ_CROSS1_30M,
KDJ_CROSS2 as KDJ_CROSS2_30M,
WR1 as WR1_30M,
WR2 as WR2_30M,
WR_CROSS1 as WR_CROSS1_30M,
WR_CROSS2 as WR_CROSS2_30M,
ROC as ROC_30M,
ROCMA as ROCMA_30M,
RSI1 as RSI1_30M,
RSI2 as RSI2_30M,
RSI3 as RSI3_30M,
RSI1_C as RSI1_C_30M,
RSI2_C as RSI2_C_30M,
RSI3_C as RSI3_C_30M,
RSI_CROSS1 as RSI_CROSS1_30M,
RSI_CROSS2 as RSI_CROSS2_30M,
CCI as CCI_30M,
CCI_CROSS1 as CCI_CROSS1_30M,
CCI_CROSS2 as CCI_CROSS2_30M,
CCI_CROSS3 as CCI_CROSS3_30M,
CCI_CROSS4 as CCI_CROSS4_30M,
BIAS1 as BIAS1_30M,
BIAS2 as BIAS2_30M,
BIAS3 as BIAS3_30M,
BIAS_CROSS1 as BIAS_CROSS1_30M,
BIAS_CROSS2 as BIAS_CROSS2_30M,
OSC as OSC_30M,
MAOSC as MAOSC_30M,
OSC_CROSS1 as OSC_CROSS1_30M,
OSC_CROSS2 as OSC_CROSS2_30M,
OSC_CROSS3 as OSC_CROSS3_30M,
OSC_CROSS4 as OSC_CROSS4_30M,
ADTM as ADTM_30M,
MAADTM as MAADTM_30M,
ADTM_CROSS1 as ADTM_CROSS1_30M,
ADTM_CROSS2 as ADTM_CROSS2_30M,
DIF as DIF_30M,
DEA as DEA_30M,
MACD as MACD_30M,
CROSS_JC as CROSS_JC_30M,
CROSS_SC as CROSS_SC_30M,
MACD_TR as MACD_TR_30M,
DI1 as DI1_30M,
DI2 as DI2_30M,
ADX as ADX_30M,
ADXR as ADXR_30M,
ADX_C as ADX_C_30M,
DI_M as DI_M_30M,
DI_CROSS1 as DI_CROSS1_30M,
DI_CROSS2 as DI_CROSS2_30M,
ADX_CROSS1 as ADX_CROSS1_30M,
ADX_CROSS2 as ADX_CROSS2_30M,
DDD as DDD_30M,
AMA as AMA_30M,
DMA_CROSS1 as DMA_CROSS1_30M,
DMA_CROSS2 as DMA_CROSS2_30M,
MTM as MTM_30M,
MTMMA as MTMMA_30M,
MTM_CROSS1 as MTM_CROSS1_30M,
MTM_CROSS2 as MTM_CROSS2_30M,
MTM_CROSS3 as MTM_CROSS3_30M,
MTM_CROSS4 as MTM_CROSS4_30M,
BBI as BBI_30M,
BBI_CROSS1 as BBI_CROSS1_30M,
BBI_CROSS2 as BBI_CROSS2_30M,
MFI as MFI_30M,
MFI_C as MFI_C_30M,
TR as TR_30M,
ATR as ATR_30M,
ATRR as ATRR_30M,
RSV as RSV_30M,
SKDJ_K as SKDJ_K_30M,
SKDJ_D as SKDJ_D_30M,
SKDJ_CROSS1 as SKDJ_CROSS1_30M,
SKDJ_CROSS2 as SKDJ_CROSS2_30M,
DDI as DDI_30M,
ADDI as ADDI_30M,
AD as AD_30M,
DDI_C as DDI_C_30M,
AD_C as AD_C_30M,
ADDI_C as ADDI_C_30M,
SHA_LOW as SHA_LOW_30M,
SHA_UP as SHA_UP_30M,
BODY as BODY_30M,
BODY_ABS as BODY_ABS_30M,
PRICE_PCG as PRICE_PCG_30M,
MA3 as MA3_30M,
MA5 as MA5_30M,
MA8 as MA8_30M,
MA10 as MA10_30M,
MA12 as MA12_30M,
MA15 as MA15_30M,
MA20 as MA20_30M,
MA30 as MA30_30M,
MA35 as MA35_30M,
MA40 as MA40_30M,
MA45 as MA45_30M,
MA50 as MA50_30M,
MA60 as MA60_30M,
SHORT10 as SHORT10_30M,
SHORT20 as SHORT20_30M,
SHORT60 as SHORT60_30M,
LONG60 as LONG60_30M,
SHORT_CROSS1 as SHORT_CROSS1_30M,
SHORT_CROSS2 as SHORT_CROSS2_30M,
LONG_CROSS1 as LONG_CROSS1_30M,
LONG_CROSS2 as LONG_CROSS2_30M,
LONG_AMOUNT as LONG_AMOUNT_30M,
SHORT_AMOUNT as SHORT_AMOUNT_30M,
GMMA3 as GMMA3_30M,
GMMA5 as GMMA5_30M,
GMMA8 as GMMA8_30M,
GMMA10 as GMMA10_30M,
GMMA12 as GMMA12_30M,
GMMA30 as GMMA30_30M,
GMMA35 as GMMA35_30M,
GMMA40 as GMMA40_30M,
GMMA45 as GMMA45_30M,
GMMA50 as GMMA50_30M,
MA_VOL3 as MA_VOL3_30M,
MA_VOL5 as MA_VOL5_30M,
MA_VOL8 as MA_VOL8_30M,
MA_VOL10 as MA_VOL10_30M,
MA_VOL12 as MA_VOL12_30M,
MA_VOL15 as MA_VOL15_30M,
MA_VOL20 as MA_VOL20_30M,
MA_VOL30 as MA_VOL30_30M,
MA_VOL35 as MA_VOL35_30M,
MA_VOL40 as MA_VOL40_30M,
MA_VOL45 as MA_VOL45_30M,
MA_VOL50 as MA_VOL50_30M,
MA_VOL60 as MA_VOL60_30M,
SHORT10V as SHORT10V_30M,
SHORT20V as SHORT20V_30M,
SHORT60V as SHORT60V_30M,
LONG60V as LONG60V_30M,
SHORTV_CROSS1 as SHORTV_CROSS1_30M,
SHORTV_CROSS2 as SHORTV_CROSS2_30M,
LONGV_CROSS1 as LONGV_CROSS1_30M,
LONGV_CROSS2 as LONGV_CROSS2_30M,
LONGV_AMOUNT as LONGV_AMOUNT_30M,
SHORTV_AMOUNT as SHORTV_AMOUNT_30M,
GMMA_VOL3 as GMMA_VOL3_30M,
GMMA_VOL5 as GMMA_VOL5_30M,
GMMA_VOL8 as GMMA_VOL8_30M,
GMMA_VOL10 as GMMA_VOL10_30M,
GMMA_VOL12 as GMMA_VOL12_30M,
GMMA_VOL30 as GMMA_VOL30_30M,
GMMA_VOL35 as GMMA_VOL35_30M,
GMMA_VOL40 as GMMA_VOL40_30M,
GMMA_VOL45 as GMMA_VOL45_30M,
GMMA_VOL50 as GMMA_VOL50_30M,
CDL2CROWS as CDL2CROWS_30M,
CDL3BLACKCROWS as CDL3BLACKCROWS_30M,
CDL3INSIDE as CDL3INSIDE_30M,
CDL3LINESTRIKE as CDL3LINESTRIKE_30M,
CDL3OUTSIDE as CDL3OUTSIDE_30M,
CDL3STARSINSOUTH as CDL3STARSINSOUTH_30M,
CDL3WHITESOLDIERS as CDL3WHITESOLDIERS_30M,
CDLABANDONEDBABY as CDLABANDONEDBABY_30M,
CDLADVANCEBLOCK as CDLADVANCEBLOCK_30M,
CDLBELTHOLD as CDLBELTHOLD_30M,
CDLBREAKAWAY as CDLBREAKAWAY_30M,
CDLCLOSINGMARUBOZU as CDLCLOSINGMARUBOZU_30M,
CDLCONCEALBABYSWALL as CDLCONCEALBABYSWALL_30M,
CDLCOUNTERATTACK as CDLCOUNTERATTACK_30M,
CDLDARKCLOUDCOVER as CDLDARKCLOUDCOVER_30M,
CDLDOJI as CDLDOJI_30M,
CDLDOJISTAR as CDLDOJISTAR_30M,
CDLDRAGONFLYDOJI as CDLDRAGONFLYDOJI_30M,
CDLENGULFING as CDLENGULFING_30M,
CDLEVENINGDOJISTAR as CDLEVENINGDOJISTAR_30M,
CDLEVENINGSTAR as CDLEVENINGSTAR_30M,
CDLGAPSIDESIDEWHITE as CDLGAPSIDESIDEWHITE_30M,
CDLGRAVESTONEDOJI as CDLGRAVESTONEDOJI_30M,
CDLHAMMER as CDLHAMMER_30M,
CDLHANGINGMAN as CDLHANGINGMAN_30M,
CDLHARAMI as CDLHARAMI_30M,
CDLHARAMICROSS as CDLHARAMICROSS_30M,
CDLHIGHWAVE as CDLHIGHWAVE_30M,
CDLHIKKAKE as CDLHIKKAKE_30M,
CDLHIKKAKEMOD as CDLHIKKAKEMOD_30M,
CDLHOMINGPIGEON as CDLHOMINGPIGEON_30M,
CDLIDENTICAL3CROWS as CDLIDENTICAL3CROWS_30M,
CDLINNECK as CDLINNECK_30M,
CDLINVERTEDHAMMER as CDLINVERTEDHAMMER_30M,
CDLKICKING as CDLKICKING_30M,
CDLKICKINGBYLENGTH as CDLKICKINGBYLENGTH_30M,
CDLLADDERBOTTOM as CDLLADDERBOTTOM_30M,
CDLLONGLEGGEDDOJI as CDLLONGLEGGEDDOJI_30M,
CDLLONGLINE as CDLLONGLINE_30M,
CDLMARUBOZU as CDLMARUBOZU_30M,
CDLMATCHINGLOW as CDLMATCHINGLOW_30M,
CDLMATHOLD as CDLMATHOLD_30M,
CDLMORNINGDOJISTAR as CDLMORNINGDOJISTAR_30M,
CDLMORNINGSTAR as CDLMORNINGSTAR_30M,
CDLONNECK as CDLONNECK_30M,
CDLPIERCING as CDLPIERCING_30M,
CDLRICKSHAWMAN as CDLRICKSHAWMAN_30M,
CDLRISEFALL3METHODS as CDLRISEFALL3METHODS_30M,
CDLSEPARATINGLINES as CDLSEPARATINGLINES_30M,
CDLSHOOTINGSTAR as CDLSHOOTINGSTAR_30M,
CDLSHORTLINE as CDLSHORTLINE_30M,
CDLSPINNINGTOP as CDLSPINNINGTOP_30M,
CDLSTALLEDPATTERN as CDLSTALLEDPATTERN_30M,
CDLSTICKSANDWICH as CDLSTICKSANDWICH_30M,
CDLTAKURI as CDLTAKURI_30M,
CDLTASUKIGAP as CDLTASUKIGAP_30M,
CDLTHRUSTING as CDLTHRUSTING_30M,
CDLTRISTAR as CDLTRISTAR_30M,
CDLUNIQUE3RIVER as CDLUNIQUE3RIVER_30M,
CDLUPSIDEGAP2CROWS as CDLUPSIDEGAP2CROWS_30M,
CDLXSIDEGAP3METHODS as CDLXSIDEGAP3METHODS_30M,
SAR_MARK as SAR_MARK_30M,
MA5_C as MA5_C_30M,
MA15_C as MA15_C_30M,
MA30_C as MA30_C_30M,
MA60_C as MA60_C_30M,
GMMA3_C as GMMA3_C_30M,
GMMA15_C as GMMA15_C_30M,
GMMA30_C as GMMA30_C_30M,
MA_VOL5_C as MA_VOL5_C_30M,
MA_VOL60_C as MA_VOL60_C_30M,
GMMA_VOL3_C as GMMA_VOL3_C_30M,
GMMA_VOL15_C as GMMA_VOL15_C_30M,
GMMA_VOL30_C as GMMA_VOL30_C_30M,
MA5_D as MA5_D_30M,
MA15_D as MA15_D_30M,
MA30_D as MA30_D_30M,
MA60_D as MA60_D_30M,
GMMA3_D as GMMA3_D_30M,
GMMA_VOL3_D as GMMA_VOL3_D_30M,
GMMA15_D as GMMA15_D_30M,
GMMA_VOL15_D as GMMA_VOL15_D_30M,
GMMA30_D as GMMA30_D_30M,
GMMA_VOL30_D as GMMA_VOL30_D_30M
from STOCK_TECHNICAL_30MIN
where order_Date >=
to_date('{from_}', 'yyyy-mm-dd')
and order_Date <=
to_date('{to_}', 'yyyy-mm-dd')
'''

def QA_Sql_Stock_Index30min(from_ , to_, type = 'day', sql_text = sql_text, ui_log= None):
    QA_util_log_info(
        '##JOB01 Now Fetch Stock QuantData Index 30Min ==== from {from_} to {to_}'.format(from_=from_,to_=to_), ui_log)
    sql_text = sql_text.format(from_=from_,to_=to_)
    conn = cx_Oracle.connect(ORACLE_PATH2)
    if type == 'day':
        sql_text = sql_text + " and substr(datetime, 12, 20) = '15:00:00'"
    data = pd.read_sql(sql=sql_text, con=conn)
    conn.close()
    if type == 'day':
        data = data.drop_duplicates((['code', 'date'])).set_index(['date','code']).drop('datetime',axis=1)
    else:
        data = data.assign(datetime = data.datetime.apply(lambda x:pd.to_datetime(x))).drop_duplicates((['code', 'datetime'])).set_index(['datetime','code'])
    for columnname in data.columns:
        if data[columnname].dtype == 'object' and columnname not in ['date','datetime','code']:
            data[columnname]=data[columnname].astype('float32')
    data = data.assign(SKDJ_TR_30M = (data.SKDJ_CROSS1_30M*-1+ data.SKDJ_CROSS2_30M*1)/(data.SKDJ_CROSS1_30M+data.SKDJ_CROSS2_30M),
                       SHORT_30M = (data.SHORT20_30M > 0)*1,
                       LONG_30M = (data.LONG60_30M > 0)*1)
    data.SKDJ_TR_30M = data.SKDJ_TR_30M.groupby('code').fillna(method='ffill')
    return(data)